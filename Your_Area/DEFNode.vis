################################################################################
CoreWorkspace respondsTo: "JS". ifFalse: [
    ToolKit createSubclass: "JS" at: CoreWorkspace;
    ################
    ####  Because:
    ####    1) the 'JS' object just created serves as the non-default
    ####       client context object received from 'node' queries that
    ####       that supply such objects
    ####    2) new 'JS' objects accessed or created from an existing
    ####       JS object are ALWAYS created as extensions of JS,
    ####
    ####  the JS object just created MUST NOT be marked 'default' (for
    ####  example, if it were, asking for the 'first: n' of a list of
    ####  valid JS objects would always return an empty list):
    ####
    JS :defaultFlag <- FALSE;
];

################################################################################
####  Parameter Conversion Helpers...
####
JS defineMethod: [ | \.id | ^self jsObject \.id];



#if this is a standalone non fed startup SecurityMap will be NA
SecurityMap isNA
ifTrue: [
Double  defineMethod: [ | \.id | ^self asSelf ];
Float   defineMethod: [ | \.id | ^self asSelf ];
Integer defineMethod: [ | \.id | ^self asSelf ];
String  defineMethod: [ | \.id | ^self asSelf ];
NA      defineMethod: [ | \.id | "visionNA" ] ;  #-- from 'vserver' project
];

SecurityMap isntNA
ifTrue: [
 # globalDefineMethod will put method into every vdb
 # in the session (eg the federation)

 Double  globalDefineMethod: [ | \.id | ^self asSelf ];
 Float   globalDefineMethod: [ | \.id | ^self asSelf ];
 Integer globalDefineMethod: [ | \.id | ^self asSelf ];
 String  globalDefineMethod: [ | \.id | ^self asSelf ];
 #because we don't know what we want to do with 'null' yet
 NA      globalDefineMethod: [ | \.id | "visionNA" ] ;

#secmap isn't in OBthe global define method
 SecurityMap CoreWorkspace
 do: [
      Double  defineMethod: [ | \.id | ^self asSelf ];
      Float   defineMethod: [ | \.id | ^self asSelf ];
      Integer defineMethod: [ | \.id | ^self asSelf ];
      String  defineMethod: [ | \.id | ^self asSelf ];
      NA      defineMethod: [ | \.id | "--NA--" ] ;
     ];

] ;

Object define: "__hasExternalImplementation" toBePrimitive: 506;

################################################################################
#  NOTE: In the following, 'Object', 'Reflect', 'keys(:)' and 'get(:at:)' are
#  native javascript properties and functions.
################

################
####  By default, the helper methods attached to this class operate on the
####  current client object:

JS define: "jsObject" toBePrimitive: 7;

####  That can be contextually rebound to refer to a different JS object by
####  by overriding 'jsObject' in a specialization of this class.  The following
####  methods do that:

JS defineMethod: [ | object: jsObject |
    jsObject __hasExternalImplementation ifTrue: [
        jsObject \.isNull == 0 ifTrue: [ ### ... Isn't a JS Null
            ^self asSelf extendBy: [ !jsObject <- ^my jsObject ]
        ]
    ] ifFalse: [jsObject]
];


JS defineMethod: [ | global: jsObject |   #-- from 'vserver' project
    ^self object: jsObject \.global
];

JS defineMethod: [ | global |
    ^self object: ^self jsGlobal
];


################
####  Return the current jsObject's global object (think ^self CoreWorkspace)...
JS defineMethod: [ | jsGlobal | ^self jsObject \.global ];

################
####  Return the current jsObject's parameter identity...
JS defineMethod: [ | jsParam | ^self jsObject \.id ];

################
####  Array creation
JS defineMethod: [ | newArray | ^self object: ^self jsGlobal Array ];
JS defineMethod: [ | newArray: nElements | ^self object: (^self jsGlobal Array: nElements) ];
JS defineMethod: [ | newArrayFrom: list |
    !newArray <- ^self newArray: list count;
    list numberElements do: [
        ^my newArray set: (position - 1) asInteger to: ^self
    ];
    newArray
];

################
####  Array return
JS defineMethod: [ | getArray |
    !self <- ^self;
    ^self jsObject length send: [isInteger ifTrue: [^self] else: [0]]. sequence0 send: [^my self get: ^self]
];

################
####  Object creation
JS defineMethod: [ | newObject | ^self object: ^self jsGlobal Object ];

################
####  Property Existence
JS defineMethod: [ | has: key |
    ^self jsGlobal Reflect has: ^self jsParam at: key. \.isTrue == 1
];

JS defineMethod: [ | hasOwnProperty: key |
    ^self jsObject hasOwnProperty: key. \.isTrue == 1
];

################
####  Property/Element Getters...
JS defineMethod: [ | get: key |
    !result <- key isBlock ifTrue: [
        ^self jsObject send: key
    ]. else: [
        ^self jsGlobal Reflect get: ^self jsParam at: key
    ];
    ^self object: result
];

JS defineMethod: [ | get: key of: jsObj |      #-- from 'vserver' project
    jsObj \.global Reflect get: jsObj \.id at: key
];

################
####  Property/Element Setters....
JS defineMethod: [ | set: key to: value |
    ^self set: key of: ^self jsObject to: value;
    ^self
];

####
JS defineMethod: [ | set: key toArrayFrom: list |
   ^self set: key to: (^self newArrayFrom: list)
];

JS defineMethod: [ | set: key of: jsObj to: value |
#>>>>>>>>>>>>>>>>
#  This should be:
#
#   jsObj \.global Reflect set: jsObj \.id key: key to: value \.id
#
#  but, since batchvision's current adapter implementation doesn't
#  support polymorphic (un-clustered) parameters, it must be:
    value basicSend: [
        ^my jsObj \.global Reflect set: ^my jsObj \.id key: ^my key to: ^self \.id
    ]

#<<<<<<<<<<<<<<<<
];

################
####  Return a Vision list of a JS object's keys...
JS defineMethod: [ | getKeys |
    ^self getJSKeys getArray
];

################
####  Return a javascript array of a JS object's keys...
JS defineMethod: [ | getJSKeys |
    ^self object: (^self jsGlobal :Object keys: ^self jsParam)
];

################
####  Return a Vision list of a jsObject's key/value pairs...
JS defineMethod: [ | getPropertyMap |
    !self <- ^self;
    ^self getKeys extendBy: [
        !keyValue <- ^my self get: ^self
    ]
];

################
####  Display a object's properties / array's elements...
JS defineMethod: [ | display |
    ^self getPropertyMap do: [
        ^self print: 20;
        keyValue printNL
    ];
    ^self
];

################################################################################
####  External Object Servers
JS defineMethod: [ | server: address | ^self serverByAddr: address ];

JS defineMethod: [ | serverByAddr: addr | ^self object: addr xo ];
JS defineMethod: [ | serverByName: name | ^self object: name xd ];

String define: "xo" toBePrimitive: 8;                        # by network address
String define: "xd" toBePrimitive: 8 withControlValue: 1;    # by directory entry

################################################################################
####  'fetch' covers

JS defineMethod: [ | fetch: query from: url |
   ^self object: (
      ^self jsObject fetch: query jsParam from: url
   )
];

JS defineMethod: [ | fetchText: query from: url |
   ^self object: (
      ^self jsObject fetchText: query jsParam
                     from: (url concat: "&pretty&")
   )
];

JS defineMethod: [ | fetchJSON: query from: url |
   ^self object: (
      ^self jsObject fetchJSON: query jsParam from: url
   )
];


JS defineMethod: [ | fetchTextFrom: url |
^self fetchTextFrom: url withOptions: ^self newObject .
] ;

JS defineMethod: [ | fetchJSONFrom: url |
^self fetchJSONFrom: url withOptions: ^self newObject .
] ;

JS defineMethod: [ | fetchFrom: url withOptions: options |
   ^self object: (
      ^self jsObject fetchFrom: url withOptions: options jsParam
   ) . get: [ await ]
];

JS defineMethod: [ | fetchTextFrom: url withOptions: options |
   ^self object: (
      ^self jsObject fetchTextFrom: (url concat: "&pretty&")
                     withOptions: options jsParam
   ) .  get: [ await ]
];

JS defineMethod: [ | fetchJSONFrom: url withOptions: options |
   ^self object: (
      ^self jsObject fetchJSONFrom: url withOptions: options jsParam
   ) . get: [ await ]
];

## newer things 11/2020

#--------------------
#  add JSON pretty print
#--------------------

JS defineMethod: [ | pprint |
^self pprint: 4
] ;

JS defineMethod: [ | pprint: n |
!obj <- ^self ;
obj global
   get: [ JSON stringify: ^my obj jsParam with: 0 and: ^my n ] . printNL
] ;

#--------------------
#  Supplemental JS methods to simplify JSON extraction
#
# q = '''
#  JS getArrayFrom: [ Security getMessages
#                        extendBy: [ !mess <- code ;
#                                    !returnType <- returnObjectType whatAmI ;
#                                    !messageType <- type code ;
#                                  ]
#                   ]
#              for: "mess, returnType, messageType"
# '''
#
# print json.dumps(runvisionJSON({'expression' : q}), indent=1)
#--------------------

JS defineMethod: [ | isConnected | ^self jsObject isntNA ] ;

JS defineMethod: [ | getConnection |
^self isConnected
    ifTrue: [ ^self extendBy: [ !external <- TRUE ] ]
   ifFalse: [ ^self getInternalConnection extendBy: [ !external <- FALSE ]  ]
] ;

JS defineMethod: [ | getInternalConnection |
^self serverByName: "Node_Fetch"
]  ;

JS defineMethod: [ | createArrayFrom: expression for: items |
  ^self createArrayFrom: expression for: items over: ^date
] ;

JS defineMethod: [ | createArrayFrom: expression for: items over: dates |
!connect <- ^self getConnection ;

!itemList <- items isString
  ifTrue: [ :items <- items breakOn: "," . send: [ stripBoundingBlanks ] . nonDefaults ] .
  elseIf: [ items isCollection ] then: [ items ] .
    else: [ items asList ] ;

!blocks <-
  itemList extendBy:
     [ !item <- ^self asString ;
       !block <- isBlock ifTrue: [ ^self ] else: [ asBlock ] ;
     ] ;

!dateList <- dates isDate
   ifTrue: [ dates asList ] .
   elseIf: [ dates isDateRange ] then: [ dates asDateList ] .
   elseIf: [ dates isCollection ] then: [ dates ] .
   else: [ dates asList ] . send: [ asDate else: ^date ] . select: [ isDate ] ;

!dataObjects <- dateList collectListElementsFrom:
   [ !connect <- ^my connect ;
     !blocks <- ^my blocks ;
     ^self evaluate:
       [ !list <- ^my expression isBlock
           ifTrue: [ ^my expression value ] else: [ ^my expression ] .
           send: [ !obj <- ^my connect newObject
                      set: "id" to: asString .
                      set: "date" to: ^date asInteger  ;
                   ^my blocks
                   do: [ !val <- ^my send: block ;
                         ^my obj set: item to: val ;
                       ] ;
                   obj
                  ]
       ]
   ] ;

!jsObj <- connect newObject
    set: "processId" to: GlobalWorkspace Utility processId .
    set: "rowCount" to: dataObjects count .
    set: "colCount" to: blocks count increment increment .
    set: "items" to: (connect newArrayFrom: ("id", "date" append: itemList )) .
    set: "dates" to: (connect newArrayFrom: (dateList send: [ asInteger ] )) .
    set: "array" to: (connect newArrayFrom: dataObjects) ;
#    set: "items" toArrayFrom: itemList .
#    set: "dates" toArrayFrom: (dateList send: [ asInteger ] ) .
#    set: "array" toArrayFrom: dataObjects ;
jsObj
] ;

JS defineMethod: [ | getArrayFrom: expression for: items over: dates |
!object <- ^self createArrayFrom: expression for: items over: dates ;
jsObject isntNA
  ifTrue: [ ^self jsObject returnJSON: (object jsParam) ]
 ifFalse: [ object ]
] ;

JS defineMethod: [ | getArrayFrom: expression for: items  |
!object <- ^self createArrayFrom: expression for: items ;
jsObject isntNA
  ifTrue: [ ^self jsObject returnJSON: (object jsParam) ]
 ifFalse: [ object ]
] ;

JS  defineMethod: [ | returnJSON: object |
  ^self isConnected && [ ^self external isTrue ]
     ifTrue: [ ^self jsObject returnJSON: object jsParam  ]
       else: [ object ]
] ;


#======================================================================

####################
#  applay.vis
#
#  Experimental code to package up the application side of the
#    external object model
####################


####################
#  Create the ToolKit class
####################
CoreWorkspace respondsTo: "Applay". ifFalse: [
    ToolKit createSubclass: "Applay" at: CoreWorkspace;
    Applay createSubclass: "Lib" at: Applay ;
] ;


####################
#  Protocol
####################

#--------------------
#  Application Execution
#--------------------

Applay defineMethod: [ | run: app withParams: params |
^self setParamsTo: params ;
^self run: app 

] ;

Applay defineMethod: [ | run: app |
!methodBlock <- ^self getAppName: app ;
!statusObject <- getNewObject ;
!responseObject <-  getNewObject ;
methodBlock isntNA
   ifTrue: [ ^current executeApplication ]
  ifFalse: [ ^current postAppNotFound ] ;

!resultObject <-  getNewObject
    set: "appName" to: app .
    set: "status" to: statusObject .
    set: "response" to: responseObject .
;
clearParams ;
^self return: resultObject

] ;

Applay defineMethod: [ | executeApplication |
!wkspace <- ^self ;
Lib
  extendBy: [ !statusObject <- ^my wkspace statusObject ;
              !responseObject <- ^my wkspace responseObject ;
            ] .
     send: ^self methodBlock
] ;

Applay defineMethod: [ | getAppName: app |
app isntNA
ifTrue:
   [ GlobalWorkspace ApplicationTools Utilities
         getCaseSensitiveSelectorFor: app in: Lib .
      send: [ isntNA ifTrue: [ asBlock ] ]
   ] .
]  ;

Applay defineMethod: [ | updateStatusWithSuccess |
^self updateStatusWith: 0 andMessage: "Success"
] ;

Applay defineMethod: [ | postAppNotFound |
^self updateStatusWith: -1
      andMessage: ("Application " concat: ^self app . concat: " Not Found")
] ;

Applay defineMethod: [ | postErrorWithMessage: message |
  ^self updateStatusWith: -2 andMessage: message
] ;
Applay defineMethod: [ | updateStatusWith: id andMessage: message |
^self statusObject
   set: "code" to: id .
   set: "message" to: message ;
^self

] ;

#----------------------------------------

####################
#  Applay external interface
####################

Applay
   define: 'connection' toBe: NA .
   define: 'params' toBe: NA .
;

Applay defineMethod: [ | getConnection |
  connection
     else: [ !connect <- GlobalWorkspace JS getConnection ;
              GlobalWorkspace JS isConnected
                ifFalse: [ ^self setConnectionTo: connect ] ;
              connect
           ]
] ;

Applay defineMethod: [ | setConnectionTo: connect |
  ^self asSelf define: 'connection' toBe: connect ;
  ^self
] ;

Applay defineMethod: [ | setParamsTo: jsDict |
  ^self asSelf define: 'params' toBe: jsDict ;
  ^self
] ;

Applay defineMethod: [ | clearParams |
  ^self asSelf define: 'params' toBe: NA ;
  ^self
] ;

Applay defineMethod: [ | getParam: key |
!input <-  GlobalWorkspace JS isConnected
   ifTrue: [ getConnection  jsObject request body send: key asBlock ] .
     elseIf: [ params isntNA ] then: [ params get: key ] ;

input isOrdinal ifTrue: [ input ]

] ;

Applay defineMethod: [ | getNewObject |
getConnection newObject
] ;

Applay defineMethod: [ | getNewArrayFrom: list |
 getConnection newArrayFrom: list
] ;

Applay  defineMethod: [ | return: object |
!wkspace <- ^self ;
!snfObjects <- ^self getSNFObjects ;
object set: "snfs" to: (^self getNewArrayFrom: snfObjects) ;
^self returnJSON: object
] ;

Applay  defineMethod: [ | returnJSON: object |
  connection isNA
     ifTrue: [ getConnection jsObject returnJSON: object jsParam ]
       else: [ object ] 
] ;

Applay defineMethod: [ | getSNFObjects |
!wkspace <- ^self ;
!snfObjects <- ^tmp currentSNFList
  send: [ ^my wkspace getNewObject
            set: 'selector' to:  selector asString .
            set: 'dbname' to: dbname .
            set: 'class' to: class
        ] ;
^tmp define: 'currentSNFList' toBe: GlobalWorkspace List new ;
snfObjects

] ;


#======================================================================

####################
#  Useful Global methods that are loaded during the fetch/factset startup
####################

ApplicationTools respondsTo: "Utilities" .
ifFalse:
   [ ApplicationTools createSubclass: "Utilities" at: ApplicationTools ;
   ] ;

#--------------------
#  generic method to get case-sensitive equivalent of a selector ;
#  Note: this method is not meant to be used in a large list operation
#  Note: that this is a recursive method
#--------------------

ApplicationTools Utilities
defineMethod: [ | getCaseSensitiveSelectorFor: id in: class |
  !words <- id asWords ;
  !currentClass <- class selectorList
       extendBy: [ !upper <- asString toUpper ] ;
  !count <- 1 ;
  !expression <- "" ;
  [ count <= words count ]
  whileTrue:
     [ !id <- words at: count ;
       :count increment ;
       !selector <- id locateInDictionaryOf: class  . isntNA
         ifTrue: [ id ] .
           else: [ !toUpper <- id toUpper ;
                   currentClass select: [ upper = ^my toUpper ] . at: 1
                 ] .
         elseIf: [ class super != class ]
           then: [ ^self getCaseSensitiveSelectorFor: id in: class super ] .
           else: [ NA ] ;
       selector isNA
       ifTrue: [ :count <- words count increment ;
                 :expression <- NA ;
               ]
      ifFalse: [ :expression <- expression concat: selector . concat: " " ] ;
    ] ;
 expression isntNA ifTrue: [ expression stripTrailingBlanks ]
] ;

####################
#  SNF Handler  - needs to run across federation!!!
#     defer for now
####################

#xxx Object defineMethod: [| handleSNF: snf|
#xxx   GlobalWorkspace ProcessControlTools logSNF: snf onObject: ^self
#xxx ] ;
#xxx 
#xxx ProcessControlTools defineMethod: [ | logSNF: snf onObject: object |
#xxx ^tmp enableSNFLogger isTrue
#xxx ifTrue:
#xxx   [ ^tmp define: 'enableSNFLogger' toBe: FALSE ;
#xxx     0 asReferenceTo: ^current .
#xxx     doOnceNoContext:
#xxx       [ !selector <- snf selector ;
#xxx         !dbname <- object CoreWorkspace name ;
#xxx         !class <- object whatAmI ;
#xxx         ^tmp currentSNFList , ^current ;
#xxx         snf dismiss ;
#xxx       ] ;
#xxx     ^tmp define: 'enableSNFLogger' toBe: TRUE ;
#xxx     NA
#xxx   ]
#xxx ] ;

^tmp define: 'enableSNFLogger' toBe: FALSE ;
^tmp define: 'currentSNFList' toBe: List new ;

